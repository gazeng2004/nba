from nba_api.stats.static import players
from nba_api.stats.endpoints import playercareerstats 
import csv
import time
"""
PlayerCareerStats can produce a dataframe that list out the average of the currents 
GP: Game played
GS: Game started
MIN: Minutes
FGM: Field goal made
FGA: field goal attempt
FG_PCT: FGM / FGA
FG3M: 3ptrs made
FG3A: 3ptrs attempt
FG3_PCT: FG3M / FG3A
FTM: Free throw made
FTA: free throw attempt
FT_PCT: FTM / FTA

"""

def writer():
    active_player = players.get_active_players()
    time.sleep(1)
    for player in active_player:
        try:
            player_stats = playercareerstats.PlayerCareerStats(player_id=player['id'])
            career_data = player_stats.get_data_frames()

            if career_data:
                last_season = career_data[0].tail(1)  # Assuming the first DataFrame contains career totals
                last : int = len(career_data[0]) - 1
                games_played : int = last_season.at[last, "GP"]
                print(f"Stats for {player['full_name']}:\n", last_season)
                with open('2024-2025nbaStats.csv', 'a', newline = '') as csvfile:
                    writer = csv.writer(csvfile)
                    writer.writerow([last_season.at[last, "PLAYER_ID"], last_season.at[last, "PLAYER_AGE"], last_season.at[last, "GP"], last_season.at[last, "MIN"], 
                                     last_season.at[last, "FGM"], last_season.at[last, "FGA"], last_season.at[last, "FG_PCT"], last_season.at[last, "FG3M"], 
                                     last_season.at[last, "FG3A"], last_season.at[last, "FG_PCT"], last_season.at[last, "FTM"], last_season.at[last, "FTA"], 
                                     last_season.at[last, "FT_PCT"], 
                                    (last_season.at[last, "OREB"] / games_played), (last_season.at[last, "DREB"] / games_played), (last_season.at[last, "REB"] / games_played),
                                    (last_season.at[last, "AST"] / games_played), (last_season.at[last, "STL"] / games_played), 
                                    (last_season.at[last, "BLK"] / games_played), last_season.at[last, "TOV"], last_season.at[last, "PF"], (last_season.at[last, "PTS"] / games_played)])
        except Exception as e:
            print(f"Failed to fetch stats for {player['full_name']} ({player['id']}): {e}")
        #print(player_stats.career_totals_regular_season)
        time.sleep(1)

def header():
    with open('2024-2025nbaStats.csv', 'a', newline = '') as csvfile:
        fieldnames = ["ID", "AGE", "GP", "MIN", "FGM", "FGA", "FG_PCT", "FG3M", "FG3A", "FG_PCT", "FTM", "FTA", "FT_PCT", "OREB", "DREB", "REB", "AST", "STL", "BLK", "TOV", "PF", "PTS"]
        writer = csv.writer(csvfile)
        writer.writerow(fieldnames)
    print("working")

if __name__ == '__main__':
    print("Hello World!")
    header()
    writer()